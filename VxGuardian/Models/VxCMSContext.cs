using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using VxGuardian.Models;
//
//    var root = Root.FromJson(jsonString);

namespace VxGuardian.Models
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using System.IO;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class RootCMS
	{
		[JsonProperty("code", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore) ]
		//[JsonConverter(typeof(ParseStringConverter))]
		public string Code { get; set; }

		[JsonProperty("computers", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Computer[] Computers { get; set; }
	}

	public partial class Computer
	{
		[JsonProperty("code", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		//[JsonConverter(typeof(ParseStringConverter))]
		public string Code { get; set; }

		[JsonProperty("screens", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Screens[] Screens { get; set; }
	}

	public partial class Screens
	{
		[JsonProperty("code", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Code { get; set; }

		[JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Width { get; set; }

		[JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Height { get; set; }

		[JsonProperty("state", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int State { get; set; }

		[JsonProperty("version", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Version { get; set; }


		[JsonProperty("playlist", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Playlist[] Playlist { get; set; }
	}

	public partial class Playlist
	{
		[JsonProperty("defOrder", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int defOrder { get; set; }

		[JsonProperty("originalID", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int OriginalID { get; set; }

		[JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Name { get; set; }

		[JsonProperty("width", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Width { get; set; }

		[JsonProperty("height", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public int Height { get; set; }

		[JsonProperty("download", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
		public Uri Download { get; set; }

		[JsonProperty("deleted", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
		public string Deleted { get; set; }
	}

	public partial class Root
	{
		public static Root FromJson(string json) => JsonConvert.DeserializeObject<Root>(json, VxGuardian.Models.Converter.Settings);
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}

	public partial class VxCMSContext
	{
		public static string path = AppDomain.CurrentDomain.BaseDirectory;
		public string fileJsonDir;

		public VxCMSContext()
		{

		}

		public void Save(Config _config)
		{
			VoxContext db = new VoxContext();
			Root _root = JsonConvert.DeserializeObject<Root>(File.ReadAllText(db.fileJsonDir));
			_root.Config[0] = _config;
			// serialize JSON directly to a file again
			using (StreamWriter file = File.CreateText(fileJsonDir))
			{
				JsonSerializer serializer = new JsonSerializer();
				serializer.Serialize(file, _root);
			}
		}
	}

}
